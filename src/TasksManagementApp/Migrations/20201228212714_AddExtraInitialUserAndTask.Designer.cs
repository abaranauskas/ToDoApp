// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TasksManagementApp.Infrastructure;

namespace TasksManagementApp.Migrations
{
    [DbContext(typeof(TasksManagementContext))]
    [Migration("20201228212714_AddExtraInitialUserAndTask")]
    partial class AddExtraInitialUserAndTask
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TasksManagementApp.Domain.TaskItems.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TaskId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCompleted = false,
                            Name = "Manage team tasks",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsCompleted = true,
                            Name = "Track progress",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsCompleted = false,
                            Name = "Buy product",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            IsCompleted = false,
                            Name = "Sell product",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            IsCompleted = false,
                            Name = "Manage transportation",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            IsCompleted = false,
                            Name = "Fix code defect",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TasksManagementApp.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<Guid>("ResetPasswordToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<DateTimeOffset>("ResetPasswordTokenExpires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "baranauskas.aidas@gmail.com",
                            Name = "Baranauskas Aidas",
                            PasswordHash = new byte[] { 66, 13, 162, 28, 126, 59, 31, 2, 26, 210, 43, 2, 214, 66, 231, 68, 235, 156, 143, 16, 179, 166, 203, 78, 220, 198, 45, 193, 231, 99, 9, 110, 122, 205, 124, 87, 222, 63, 79, 79, 23, 10, 102, 227, 97, 210, 231, 172, 47, 39, 23, 51, 85, 34, 132, 12, 26, 182, 178, 78, 8, 128, 8, 35 },
                            PasswordSalt = new byte[] { 36, 63, 189, 184, 160, 200, 3, 163, 117, 153, 144, 105, 133, 22, 61, 187, 145, 133, 252, 230, 134, 54, 110, 181, 187, 67, 89, 124, 65, 49, 128, 233, 44, 100, 137, 140, 23, 50, 89, 126, 60, 79, 135, 103, 42, 203, 124, 164, 49, 58, 39, 105, 250, 254, 96, 185, 199, 10, 73, 231, 83, 42, 15, 187, 178, 85, 231, 97, 129, 62, 128, 120, 247, 233, 194, 250, 40, 92, 208, 32, 177, 65, 184, 172, 14, 67, 5, 230, 206, 24, 163, 1, 64, 140, 156, 194, 106, 157, 53, 54, 250, 97, 93, 231, 209, 102, 170, 189, 1, 46, 73, 87, 190, 190, 195, 67, 83, 83, 82, 83, 137, 200, 7, 206, 97, 128, 28, 244 },
                            Role = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "aidas.baranauskas@yahoo.com",
                            Name = "Aidas Baranauskas",
                            PasswordHash = new byte[] { 85, 50, 101, 63, 237, 128, 203, 26, 145, 72, 255, 222, 107, 165, 67, 249, 117, 105, 15, 20, 7, 150, 144, 216, 89, 180, 192, 250, 77, 199, 171, 186, 202, 70, 62, 176, 91, 231, 173, 117, 226, 230, 243, 14, 71, 190, 65, 33, 202, 159, 94, 35, 173, 97, 114, 107, 94, 195, 177, 92, 146, 251, 118, 206 },
                            PasswordSalt = new byte[] { 155, 165, 3, 76, 228, 126, 4, 28, 31, 90, 106, 208, 64, 140, 85, 99, 102, 139, 104, 21, 191, 70, 152, 123, 105, 194, 76, 251, 158, 170, 215, 5, 143, 202, 77, 3, 212, 2, 187, 65, 52, 62, 34, 77, 54, 125, 164, 222, 71, 43, 195, 11, 195, 228, 244, 36, 97, 141, 83, 137, 131, 58, 184, 175, 44, 212, 28, 179, 196, 10, 214, 178, 105, 211, 103, 228, 166, 241, 215, 107, 60, 171, 107, 248, 38, 141, 15, 71, 85, 179, 75, 109, 17, 207, 238, 115, 202, 183, 19, 95, 16, 218, 193, 32, 192, 56, 137, 133, 119, 151, 231, 110, 64, 35, 39, 151, 135, 64, 46, 184, 197, 43, 60, 85, 41, 172, 24, 19 },
                            Role = "user"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@taskmanagementapp.com",
                            Name = "Simple User",
                            PasswordHash = new byte[] { 219, 110, 80, 19, 53, 68, 182, 13, 20, 221, 14, 69, 74, 229, 57, 106, 32, 9, 44, 44, 248, 112, 57, 232, 149, 104, 134, 33, 48, 148, 226, 237, 23, 104, 189, 245, 183, 69, 145, 120, 198, 190, 219, 26, 77, 212, 69, 78, 218, 103, 89, 90, 245, 183, 254, 92, 57, 14, 224, 8, 227, 57, 140, 228 },
                            PasswordSalt = new byte[] { 63, 144, 98, 102, 201, 84, 143, 70, 53, 198, 11, 206, 242, 60, 145, 173, 205, 27, 116, 140, 62, 61, 226, 174, 221, 51, 203, 155, 155, 68, 68, 218, 83, 168, 46, 231, 130, 179, 156, 152, 236, 55, 196, 8, 104, 119, 85, 31, 72, 225, 78, 205, 87, 20, 101, 46, 120, 92, 144, 116, 175, 156, 169, 233, 173, 6, 64, 96, 102, 59, 242, 19, 106, 245, 103, 196, 188, 8, 77, 92, 175, 100, 199, 89, 167, 82, 175, 200, 173, 30, 68, 226, 123, 217, 92, 175, 91, 254, 26, 8, 218, 65, 160, 176, 218, 17, 34, 194, 32, 200, 34, 156, 156, 41, 193, 132, 83, 219, 122, 166, 1, 89, 224, 5, 214, 100, 37, 3 },
                            Role = "user"
                        });
                });

            modelBuilder.Entity("TasksManagementApp.Domain.TaskItems.TaskItem", b =>
                {
                    b.HasOne("TasksManagementApp.Domain.Users.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
